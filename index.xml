<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>note.</title>
    <link>https://sourjp.github.io/</link>
    <description>Recent content on note.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy; sourjp</copyright>
    <lastBuildDate>Thu, 20 Aug 2020 22:08:59 +0900</lastBuildDate>
    
	<atom:link href="https://sourjp.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>k8s FieldRef.labelsについて</title>
      <link>https://sourjp.github.io/posts/k8s-fieldref/</link>
      <pubDate>Thu, 20 Aug 2020 22:08:59 +0900</pubDate>
      
      <guid>https://sourjp.github.io/posts/k8s-fieldref/</guid>
      <description>Qiita: FieldRef.labels[&amp;lsquo;KEY&amp;rsquo;]知らなかった を書いた。</description>
    </item>
    
    <item>
      <title>Go Todo練習 day1</title>
      <link>https://sourjp.github.io/posts/go-todo1/</link>
      <pubDate>Wed, 19 Aug 2020 23:38:34 +0900</pubDate>
      
      <guid>https://sourjp.github.io/posts/go-todo1/</guid>
      <description>gin-gonicとdatabase/sqlの基本的な動作は試せたので、早速ど定番のTodoアプリを作ってみます。やっぱ試してみないと不明点は見つかりにくいですしね！
day1ということで簡単な内容で今回は作ります
 main.goのみ DBはpostgres使う TODOアプリで登録、取得のみ対応  作成したコードはsourjp/go-practice/day1にあります。
1. TODOを定義 ここでのポイントは FinishedAt の、*time.Time です。たとえ omitempty を使っていても、 time.Time のゼロ値は対象外(表示される)となります。
JSON omitempty With time.Time Fieldが参考になります。
そのため、pointerにしてnil扱いにすることでemptyと判定させることができます。 ただDBの視点で考えたときに、登録時にそもそもデータがないのだからomitempty関係なく空だからそりゃでないじゃんという・・・
構造体をMarshalする時には知っといた方がいいポイントかと思いました。
type TODO struct { ID int `db:&amp;#34;id&amp;#34; json:&amp;#34;id&amp;#34;` Title string `db:&amp;#34;title&amp;#34; json:&amp;#34;title&amp;#34;` Message string `db:&amp;#34;message&amp;#34; json:&amp;#34;message&amp;#34;` CreatedAt time.Time `db:&amp;#34;created_at&amp;#34; json:&amp;#34;created_at&amp;#34;` FinishedAt *time.Time `db:&amp;#34;finished_at&amp;#34; json:&amp;#34;finished_at,omitempty&amp;#34;` } /* $ make t-get [ { &amp;#34;id&amp;#34;: 1, &amp;#34;title&amp;#34;: &amp;#34;study&amp;#34;, &amp;#34;message&amp;#34;: &amp;#34;study&amp;#34;, &amp;#34;created_at&amp;#34;: &amp;#34;2020-08-19T22:59:42.568475Z&amp;#34;, &amp;#34;finished_at&amp;#34;: &amp;#34;0001-01-01T00:00:00Z&amp;#34; &amp;lt;--- time.Timeのゼロ値で入れてしまった }, { &amp;#34;id&amp;#34;: 2, &amp;#34;title&amp;#34;: &amp;#34;study2&amp;#34;, &amp;#34;message&amp;#34;: &amp;#34;study2&amp;#34;, &amp;#34;created_at&amp;#34;: &amp;#34;2020-08-19T23:14:50.</description>
    </item>
    
    <item>
      <title>Go database/sql の操作ガイドあったんかい</title>
      <link>https://sourjp.github.io/posts/go-db/</link>
      <pubDate>Mon, 17 Aug 2020 22:02:45 +0900</pubDate>
      
      <guid>https://sourjp.github.io/posts/go-db/</guid>
      <description>database/sqlを触ってますが、いまいちしっかり説明してくれるリソースがないなあと思ってたら、goのwikiにGo database/sql tutorialがあった！
ということで試しながらポイントを整理してきます。
Overview  DBへのアクセスには sql.DB を利用 sql.DB　は指定したDriverへアクセスを抽象化した存在 これによってDriverがPostgresでも、MySQLでも統一した操作を提供  Importing a Database Driver  利用には database/sql とDriverパッケージの二つが必要 一般的にDriverパッケージは依存するため使わない database/sql を介してアクセス Dirver自体は次のようにすることでDriverとして登録(Go import _ ってなんだみてね)  import ( &amp;#34;database/sql&amp;#34; _ &amp;#34;github.com/lib/pq&amp;#34; ) wikiではmysqlですが、今回はpostgres driverを使います
Accessing the Database  sql.Open()により取得したobjectでDBを操作可能  第一引数はdriverの名前で、第二引数はパラメーター(PGの場合はココ)を渡します
テストとしてDBが必要なのでDockerのpostgres利用することにして、簡単にMakefileを用意します
$ docker run --name go-pg -e POSTGRES_USER=root -e POSTGRES_PASSWORD=root -e POSTGRES_DB=test -p 5432:5432 -d postgres:12.4
init-db: @docker run --name go-pg -e POSTGRES_USER=root -e POSTGRES_PASSWORD=root -e POSTGRES_DB=test -p 5432:5432 -d postgres:12.</description>
    </item>
    
    <item>
      <title>sidecarのshell scriptで時間をトリガーにする</title>
      <link>https://sourjp.github.io/posts/shell-timer/</link>
      <pubDate>Mon, 17 Aug 2020 13:12:32 +0900</pubDate>
      
      <guid>https://sourjp.github.io/posts/shell-timer/</guid>
      <description>shell scriptを時間指定で実行したいときに cronjob や at など方法があると思います。
ただKubernetes環境で実行したいときはどうでしょうか？ shell scriptを実行するだけなら cronjob リソースを使えば良いのですが、今回は対象アプリのsidecarとして載せる必要がありました。この場合は Deployment リソースなので、shell scriptに時間トリガーを仕込む必要がありました。
integer で比較など色々試行錯誤しましたが、stackoverflowのHow to check if the current time is between 23:00 and 06:30に素晴らしいアイデアがありました。
結論はdateをstringで取り出して、caseで判定を行います。
#!/bin/bash while :; do currenttime=$(date +%H:%M) echo $currenttime case &amp;#34;$currenttime&amp;#34; in (04:21) # 04:21にbreakしてscriptを終了 echo &amp;#34;break&amp;#34; break ;; (*) echo &amp;#34;*&amp;#34; ;; esac sleep 5s done exit 0 動作させた結果がこちらです。
$ bash test.sh 04:20 * 04:20 * 04:20 * 04:21 break バッチリですね。02:00~04:00の間などの条件を使いたいときは正規表現です。
#!/bin/bash while :; do currenttime=$(date +%H:%M) echo $currenttime case &amp;#34;$currenttime&amp;#34; in (0[2-4]:*) echo &amp;#34;break&amp;#34; break ;; (*) echo &amp;#34;*&amp;#34; ;; esac sleep 5s done exit 0 簡単なことですが知っとくと便利なことでした。</description>
    </item>
    
    <item>
      <title>Go Gin packageの基本を触る</title>
      <link>https://sourjp.github.io/posts/go-gin/</link>
      <pubDate>Sun, 16 Aug 2020 16:45:31 +0900</pubDate>
      
      <guid>https://sourjp.github.io/posts/go-gin/</guid>
      <description>バックエンドエンジニアへの転職を希望しています。最新の技術を学びたく、外部勉強会をはじめとして、クラウドサービスやKubernetesと知識をつけていった結果、Webアプリケーション開発に魅力を強く感じたことがきっかけです。
職務経歴 請負業務を経験してきたため、自社開発のWebアプリケーションサービスに関わりたいです。
gin-gonic/ginが圧倒的な人気を誇っているので、README.mdにある一通りの機能でWebAPI(JSON format)の想定で関わりそうな機能を試していきます。
記載してあるコードはREADME.mdにあるコードを抜粋したり、改変したりして記載しています。
QuickStart とりあえずQuickStartのコードを試してみる。
package main import &amp;#34;github.com/gin-gonic/gin&amp;#34; func main() { r := gin.Default() r.GET(&amp;#34;/ping&amp;#34;, func(c *gin.Context) { c.JSON(200, gin.H{ &amp;#34;message&amp;#34;: &amp;#34;pong&amp;#34;, }) }) r.Run() } $ curl localhost:8080/ping {&amp;#34;message&amp;#34;:&amp;#34;pong&amp;#34;} $ go run main.go [GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached. [GIN-debug] [WARNING] Running in &amp;#34;debug&amp;#34; mode. Switch to &amp;#34;release&amp;#34; mode in production. - using env: export GIN_MODE=release - using code: gin.</description>
    </item>
    
    <item>
      <title>Go import _ ってなんだ</title>
      <link>https://sourjp.github.io/posts/go-import/</link>
      <pubDate>Sun, 16 Aug 2020 12:59:43 +0900</pubDate>
      
      <guid>https://sourjp.github.io/posts/go-import/</guid>
      <description>import _ &amp;quot;hogehoge&amp;quot; の _ は、どういう意味があるんだろうと気になったので調べました。
init()の実行が理由 packageの中身を利用しないが、init()関数が必要な場合に利用するようです。 なので次のように動作を試してみました。
main.go
package main import ( &amp;#34;fmt&amp;#34; _ &amp;#34;github.com/sourjp/practice/hello&amp;#34; ) func main() { fmt.Println(&amp;#34;Hi&amp;#34;) } hello/hello.go
package hello import &amp;#34;fmt&amp;#34; func init() { fmt.Println(&amp;#34;hello&amp;#34;) } 実行してみるとpackage helloを使わないが、中に定義されているinit()が実行されていることがわかります。
$ go run main.go hello Hi 次に実際のpackageでの使われ方をみていきます。
package imageの場合 package imageでは、Decode()を行うのにRegistration()で拡張子を登録する必要があります。
 Values of the Image interface are created either by calling functions such as NewRGBA and NewPaletted, or by calling Decode on an io.Reader containing image data in a format such as GIF, JPEG or PNG.</description>
    </item>
    
    <item>
      <title>Go Command Line Tool Packagesをざっと試す</title>
      <link>https://sourjp.github.io/posts/go-cmd/</link>
      <pubDate>Fri, 14 Aug 2020 09:42:40 +0900</pubDate>
      
      <guid>https://sourjp.github.io/posts/go-cmd/</guid>
      <description>Go言語でコマンドラインツールを作ろうと思いましたが、サブコマンドが必要になりそうだったので調べました。 書きやすいものを探したいので次のコマンドを作るという前提で比較していきます。
 ./cmd foo -name=foo args ./cmd bar -name=bar args  対象は標準パッケージと、みんなのGo言語にピックアップされている3rd packageも試してみます。
flag (標準) 大変わかりやすかったので、Go by Example: Command-Line Subcommandsをベースに簡略化して考えたいと思います。
package main import ( &amp;#34;flag&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;os&amp;#34; ) func main() { fooCmd := flag.NewFlagSet(&amp;#34;foo&amp;#34;, flag.ExitOnError) fooName := fooCmd.String(&amp;#34;name&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;name&amp;#34;) barCmd := flag.NewFlagSet(&amp;#34;bar&amp;#34;, flag.ExitOnError) barName := barCmd.String(&amp;#34;name&amp;#34;, 0, &amp;#34;name&amp;#34;) if len(os.Args) &amp;lt; 2 { fmt.Println(&amp;#34;expected &amp;#39;foo&amp;#39; or &amp;#39;bar&amp;#39; subcommands&amp;#34;) os.Exit(1) } switch os.Args[1] { case &amp;#34;foo&amp;#34;: fooCmd.Parse(os.Args[2:]) fmt.Println(&amp;#34;subcommand &amp;#39;foo&amp;#39;&amp;#34;) fmt.</description>
    </item>
    
    <item>
      <title>ArgoCDをArgoCDで管理 &#43; Kustomize</title>
      <link>https://sourjp.github.io/posts/devops-argo/</link>
      <pubDate>Thu, 13 Aug 2020 14:47:59 +0900</pubDate>
      
      <guid>https://sourjp.github.io/posts/devops-argo/</guid>
      <description>Qiita: ArgoCDをArgoCDで管理 + Kustomizeに書いた。</description>
    </item>
    
    <item>
      <title>gosecいいね</title>
      <link>https://sourjp.github.io/posts/go-gosec/</link>
      <pubDate>Wed, 12 Aug 2020 22:18:08 +0900</pubDate>
      
      <guid>https://sourjp.github.io/posts/go-gosec/</guid>
      <description>securego/gosecなるものを教えてもらった。 Go ASTでセキュリティの問題がないかをチェックしてくれるようです。
どんな内容をチェックしてくれる？ Available rulesがその一覧。
もう少し細かいところは公式サイトにありますが、更新はされてなさそうですね。 GitHubは月に5-10回ぐらいcommitされているので活発そうです。
Gxxxって何の番号？ README.mdに書いてありました。 gosecのprojectで採番している番号で、その元はCWEのようです。
対応表を見ると、例えば G102 は CWE-200 にマッチしていて、CWE-22: Improper Limitation of a Pathname to a Restricted Directory (&amp;lsquo;Path Traversal&amp;rsquo;)とアクセスすれば良さそうです。
// GetCwe creates a cwe object for a given RuleID func GetCwe(id string) Cwe { return Cwe{ID: id, URL: fmt.Sprintf(&amp;#34;https://cwe.mitre.org/data/definitions/%s.html&amp;#34;, id)} } // IssueToCWE maps gosec rules to CWEs var IssueToCWE = map[string]Cwe{ &amp;#34;G101&amp;#34;: GetCwe(&amp;#34;798&amp;#34;), &amp;#34;G102&amp;#34;: GetCwe(&amp;#34;200&amp;#34;), ---snip--- } 誰が使ってるの？ リストがありました。 GitlabやVMwareなどの企業しかり、KubernetesやJenkins Xなどのプロジェクトにも使われるようですね。</description>
    </item>
    
    <item>
      <title>Hugo始めました</title>
      <link>https://sourjp.github.io/posts/hugo/</link>
      <pubDate>Tue, 11 Aug 2020 20:53:54 +0900</pubDate>
      
      <guid>https://sourjp.github.io/posts/hugo/</guid>
      <description>Hugoについて Golang製の静的サイトジェネレータ。高速。
Theme選び 今では結構選択肢が多い。シンプルが好みなので、Picklesを使うことにした。
 Pickles Cactus  Deploy方法 AWS, Firebaseなど色々用意されているが、次を参考にするとGitHub Pagesが無料だし定番ぽい。
 公式 Hugoで1からテーマを作ってGitHub Pagesにデプロイする  参考を読むとデプロイ方法は次の通りとわかったが、サクッと実装できずハマった。。
 blog用のrepositoryの master branchから配信 blog用のrepositoryの gh-pages branchから配信 blog用のrepositoryの master branchの /dir から配信  今回採用した1の方法について補足する。選んだ理由はHugoの設定関連をprivate repositoryにして隠すことができること。あと分かりやすい。
例えば sample さんのGITHUBアカウントだと、repositoryを二つ作る。
 Hugoの設定ファイルを管理するrepository e.g. sample/blog GitHub Pages配信repository e.g. sample/sample.github.io  ポイントは sample/blog/ に生成される /public を、sample/sample.github.io のsubmoduleとすること。
こんな感じ。
tree -L 1 sample/blog // Hugo用のrepository ├── Makefile ├── archetypes ├── config.toml ├── content ├── data ├── layouts ├── public // submoduleでsample/sample.</description>
    </item>
    
  </channel>
</rss>