<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>error on note.</title>
    <link>https://sourjp.github.io/tags/error/</link>
    <description>Recent content in error on note.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy; sourjp</copyright>
    <lastBuildDate>Sat, 22 Aug 2020 18:34:02 +0900</lastBuildDate>
    
	<atom:link href="https://sourjp.github.io/tags/error/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go Errorの基本的なこと</title>
      <link>https://sourjp.github.io/posts/go-error/</link>
      <pubDate>Sat, 22 Aug 2020 18:34:02 +0900</pubDate>
      
      <guid>https://sourjp.github.io/posts/go-error/</guid>
      <description>カスタムエラーについて理解が浅かったので改めて整理したいと思います。
基本形 仕様を確認 errorはinterfaceのため Error() string を満たせばいいとあります。
type error interface { Error() string } errosがまさにその実装を踏まえて作られております。
package errors // errors.New()はその構造体を返す func New(text string) error { return &amp;amp;errorString{text} } // errorStringというError() stringを満たす構造体を作る type errorString struct { s string } func (e *errorString) Error() string { return e.s } 実装してみる 同じように作ってみました。 エラー情報として欲しい内容を構造体に定義したら良さそうですね。
type TestError struct { first, second string } func (e TestError) Error() string { return fmt.Sprintf(&amp;#34;%s --- %s&amp;#34;, e.first, e.second) } func NewErr(first, second string) error { return &amp;amp;TestError{first, second} } func main() { fmt.</description>
    </item>
    
  </channel>
</rss>