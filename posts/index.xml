<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on note.</title>
    <link>https://sourjp.github.io/posts/</link>
    <description>Recent content in Posts on note.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy; sourjp</copyright>
    <lastBuildDate>Tue, 11 Aug 2020 20:53:54 +0900</lastBuildDate>
    
	<atom:link href="https://sourjp.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hugo始めました</title>
      <link>https://sourjp.github.io/posts/hugo/</link>
      <pubDate>Tue, 11 Aug 2020 20:53:54 +0900</pubDate>
      
      <guid>https://sourjp.github.io/posts/hugo/</guid>
      <description>Hugoについて Golang製の静的サイトジェネレータ。高速。
Theme選び 今では結構選択肢が多い。シンプルが好みなので、Picklesを使うことにした。
 Pickles Cactus  Deploy方法 AWS, Firebaseなど色々用意されているが、次を参考にするとGitHub Pagesが無料だし定番ぽい。
 公式 Hugoで1からテーマを作ってGitHub Pagesにデプロイする  参考を読むとデプロイ方法は次の通りとわかったが、サクッと実装できずハマった。。
 blog用のrepositoryの master branchから配信 blog用のrepositoryの gh-pages branchから配信 blog用のrepositoryの master branchの /dir から配信  今回採用した1の方法について補足する。選んだ理由はHugoの設定関連をprivate repositoryにして隠すことができること。あと分かりやすい。
例えば sample さんのGITHUBアカウントだと、repositoryを二つ作る。
 Hugoの設定ファイルを管理するrepository e.g. sample/blog GitHub Pages配信repository e.g. sample/sample.github.io  ポイントは sample/blog/ に生成される /public を、sample/sample.github.io のsubmoduleとすること。
こんな感じ。
tree -L 1 sample/blog // Hugo用のrepository ├── Makefile ├── archetypes ├── config.toml ├── content ├── data ├── layouts ├── public // submoduleでsample/sample.</description>
    </item>
    
  </channel>
</rss>