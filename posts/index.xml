<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on note.</title>
    <link>https://sourjp.github.io/posts/</link>
    <description>Recent content in Posts on note.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>&amp;copy; sourjp</copyright>
    <lastBuildDate>Fri, 14 Aug 2020 09:42:40 +0900</lastBuildDate>
    
	<atom:link href="https://sourjp.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go Command Line Tool Packages</title>
      <link>https://sourjp.github.io/posts/go-cmd/</link>
      <pubDate>Fri, 14 Aug 2020 09:42:40 +0900</pubDate>
      
      <guid>https://sourjp.github.io/posts/go-cmd/</guid>
      <description>Go言語でコマンドラインツールを作ろうと思いましたが、サブコマンドが必要になりそうだったので調べました。 書きやすいものを探したいので次のコマンドを作るという前提で比較していきます。
 ./cmd foo -name=foo args ./cmd bar -name=bar args  対象は標準パッケージと、みんなのGo言語にピックアップされている3rd packageも試してみます。
flag (標準) 大変わかりやすかったので、Go by Example: Command-Line Subcommandsをベースに簡略化して考えたいと思います。
package main import ( &amp;#34;flag&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;os&amp;#34; ) func main() { fooCmd := flag.NewFlagSet(&amp;#34;foo&amp;#34;, flag.ExitOnError) fooName := fooCmd.String(&amp;#34;name&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;name&amp;#34;) barCmd := flag.NewFlagSet(&amp;#34;bar&amp;#34;, flag.ExitOnError) barName := barCmd.String(&amp;#34;name&amp;#34;, 0, &amp;#34;name&amp;#34;) if len(os.Args) &amp;lt; 2 { fmt.Println(&amp;#34;expected &amp;#39;foo&amp;#39; or &amp;#39;bar&amp;#39; subcommands&amp;#34;) os.Exit(1) } switch os.Args[1] { case &amp;#34;foo&amp;#34;: fooCmd.Parse(os.Args[2:]) fmt.Println(&amp;#34;subcommand &amp;#39;foo&amp;#39;&amp;#34;) fmt.</description>
    </item>
    
    <item>
      <title>ArgoCDをArgoCDで管理 &#43; Kustomize</title>
      <link>https://sourjp.github.io/posts/argo/</link>
      <pubDate>Thu, 13 Aug 2020 14:47:59 +0900</pubDate>
      
      <guid>https://sourjp.github.io/posts/argo/</guid>
      <description>Qiita: ArgoCDをArgoCDで管理 + Kustomizeに書いた。</description>
    </item>
    
    <item>
      <title>gosec</title>
      <link>https://sourjp.github.io/posts/gosec/</link>
      <pubDate>Wed, 12 Aug 2020 22:18:08 +0900</pubDate>
      
      <guid>https://sourjp.github.io/posts/gosec/</guid>
      <description>securego/gosecなるものを教えてもらった。 Go ASTでセキュリティの問題がないかをチェックしてくれるようです。
どんな内容をチェックしてくれる？ Available rulesがその一覧。
もう少し細かいところは公式サイトにありますが、更新はされてなさそうですね。 GitHubは月に5-10回ぐらいcommitされているので活発そうです。
Gxxxって何の番号？ README.mdに書いてありました。 gosecのprojectで採番している番号で、その元はCWEのようです。
対応表を見ると、例えば G102 は CWE-200 にマッチしていて、CWE-22: Improper Limitation of a Pathname to a Restricted Directory (&amp;lsquo;Path Traversal&amp;rsquo;)とアクセスすれば良さそうです。
// GetCwe creates a cwe object for a given RuleID func GetCwe(id string) Cwe { return Cwe{ID: id, URL: fmt.Sprintf(&amp;#34;https://cwe.mitre.org/data/definitions/%s.html&amp;#34;, id)} } // IssueToCWE maps gosec rules to CWEs var IssueToCWE = map[string]Cwe{ &amp;#34;G101&amp;#34;: GetCwe(&amp;#34;798&amp;#34;), &amp;#34;G102&amp;#34;: GetCwe(&amp;#34;200&amp;#34;), ---snip--- } 誰が使ってるの？ リストがありました。 GitlabやVMwareなどの企業しかり、KubernetesやJenkins Xなどのプロジェクトにも使われるようですね。</description>
    </item>
    
    <item>
      <title>Hugo始めました</title>
      <link>https://sourjp.github.io/posts/hugo/</link>
      <pubDate>Tue, 11 Aug 2020 20:53:54 +0900</pubDate>
      
      <guid>https://sourjp.github.io/posts/hugo/</guid>
      <description>Hugoについて Golang製の静的サイトジェネレータ。高速。
Theme選び 今では結構選択肢が多い。シンプルが好みなので、Picklesを使うことにした。
 Pickles Cactus  Deploy方法 AWS, Firebaseなど色々用意されているが、次を参考にするとGitHub Pagesが無料だし定番ぽい。
 公式 Hugoで1からテーマを作ってGitHub Pagesにデプロイする  参考を読むとデプロイ方法は次の通りとわかったが、サクッと実装できずハマった。。
 blog用のrepositoryの master branchから配信 blog用のrepositoryの gh-pages branchから配信 blog用のrepositoryの master branchの /dir から配信  今回採用した1の方法について補足する。選んだ理由はHugoの設定関連をprivate repositoryにして隠すことができること。あと分かりやすい。
例えば sample さんのGITHUBアカウントだと、repositoryを二つ作る。
 Hugoの設定ファイルを管理するrepository e.g. sample/blog GitHub Pages配信repository e.g. sample/sample.github.io  ポイントは sample/blog/ に生成される /public を、sample/sample.github.io のsubmoduleとすること。
こんな感じ。
tree -L 1 sample/blog // Hugo用のrepository ├── Makefile ├── archetypes ├── config.toml ├── content ├── data ├── layouts ├── public // submoduleでsample/sample.</description>
    </item>
    
  </channel>
</rss>